// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract VotingToken is ERC20, Ownable {
    mapping(address => bool) public hasReceivedInitialTokens;
    uint256 public constant INITIAL_SUPPLY = 10 * 10**18; // 10 토큰 (18 decimals)

    constructor() ERC20("Voting Token", "VT") Ownable(msg.sender) {}

    function issueInitialTokens(address recipient) external onlyOwner returns (bool) {
        require(!hasReceivedInitialTokens[recipient], "Token already issued to this address");

        hasReceivedInitialTokens[recipient] = true;
        _mint(recipient, INITIAL_SUPPLY);

        return true;
    }

    function vote(uint256 candidateId) external returns (bool) {
        uint256 voteCost = 1 * 10**18;
        require(balanceOf(msg.sender) >= voteCost, "Insufficient token balance");

        _burn(msg.sender, voteCost);

        emit VoteCast(msg.sender, candidateId);

        return true;
    }

    event VoteCast(address indexed voter, uint256 candidateId);
}